<?php
/**
 * @file
 * Code for the core_ef feature.
 */

include_once 'core_ef.features.inc';


function core_ef_menu() {
  $items = array();

  $items['home'] = array(
    'page callback' => core_ef_home(),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

function core_ef_home(){
	return;
}

function core_ef_init() {
  if (isset($_GET['pop']) && $_GET['pop'] == 1) {
    drupal_set_message('**Testing the pop up messages. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute.');
  }
}


function core_ef_mail_alter(&$message) {
  //dpm($message['id']);
  //switch($message['id']) {
  //  case "user_register_no_approval_required":
  if ($_SESSION['beta']) {
    $message['send'] = FALSE;
    //drupal_get_messages('status');
    //drupal_set_message("Thanks for signing up for our Beta program. We will send you information as soon as it is available.");
    //if ($message['id'] != "user_register_pending_approval_admin" || $message['id'] != "user_register_pending_approval") {
      //drupal_set_message('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />Once it has been approved, you will receive an e-mail containing further instructions.');
    //   drupal_set_message('ARG!');
      unset($_SESSION['beta']);
    //}
  }
  //    break;
  //}
}

function core_ef_form_alter(&$form, &$form_state, $form_id) {
  //dpm("form_id: " . $form_id);
  //dpm($form);
}

function core_ef_form_user_register_form_alter(&$form, &$form_state) {
  $form['autoassignrole_user']['#attributes']['style'][] = 'visibility:hidden;height:0';
  $form['autoassignrole_user']['#weight'] = 20;
  $form['field_client_type']['#access'] = FALSE;
  if (arg(2) =='beta') {
    $_SESSION['beta'] = true;
    $form['autoassignrole_user']['user_roles']['#default_value'] = 6;
  } else {
    $form['field_notes']['#access'] = FALSE;
    $form['autoassignrole_user']['user_roles']['#default_value'] = 7;
  }
  //dpm($form);
}

function core_ef_form_user_profile_form_alter(&$form, &$form_state) {
  $form['contact']['#access'] = FALSE;
  $form['timezone']['#access'] = FALSE;
  $form['field_client_type']['#disabled'] = TRUE;
  // setup redirect to Company Appliation if cookie exists for client/get-started
  // and must be after password reset is completed
  global $user;
  if (!isset($_SESSION['pass_reset_' . $user->uid]) && isset($_COOKIE['destination'])) {
    if ($_COOKIE['destination'] == 'client/get-started') {
      $account = user_load($user->uid);
      _em_apply_redirect_id($account);
    }
  }
}


function core_ef_form_data_person_node_form_alter(&$form, &$form_state) {
  //dpm($form);
  //dpm($form_state);

  $form['field_product_id']['#type'] = 'hidden';
  $form['field_kba']['#access'] = FALSE;
  $form['additional_settings']['#access'] = FALSE;
  $form['field_company']['#disabled'] = TRUE;
  $form['field_name_first']['#disabled'] = TRUE;
  $form['field_name_last']['#disabled'] = TRUE;
  $form['field_name_middle']['#disabled'] = TRUE;
  $form['field_name_maiden']['#disabled'] = TRUE;
  $form['field_name_suffix']['#disabled'] = TRUE;
  $form['field_ssn']['#disabled'] = TRUE;
  $form['field_dob']['#disabled'] = TRUE;
  $form['field_gender']['#disabled'] = TRUE;
  $form['field_email_address']['#disabled'] = TRUE;
   // Change button labels for Residence
  _core_ef_set_button($form['field_address']['und'], "Add another Address", "Remove this Address", TRUE);
  // Change button labels for Employment
  _core_ef_set_button($form['field_employment']['und'], "Add another Employer", "Remove this Employer", TRUE);
  // Change button labels for Education
  _core_ef_set_button($form['field_education']['und'], "Add another Degree", "Remove this Degree", TRUE);
  // Change button labels for Criminal
  _core_ef_set_button($form['field_criminal']['und'], "Add another Conviction", "Remove this Conviction", TRUE);

  return $form;
}

function core_ef_form_data_company_node_form_alter(&$form, &$form_state) {
  //dpm($form);
  //dpm($form_state);
  if ($form['field_invite_officers']['und'][0]['field_first_name']['und'][0]['value']['#default_value'] == NULL
    && $form['field_invite_officers']['und'][0]['field_last_name']['und'][0]['value']['#default_value'] == NULL
    && $form['field_invite_officers']['und'][0]['field_email']['und'][0]['email']['#default_value'] == NULL) {
    global $user;
    $account = user_load($user->uid);
    $form['field_invite_officers']['und'][0]['field_first_name']['und'][0]['value']['#default_value'] = $account->field_name_first['und'][0]['value'];
    $form['field_invite_officers']['und'][0]['field_last_name']['und'][0]['value']['#default_value'] = $account->field_name_last['und'][0]['value'];
    $form['field_invite_officers']['und'][0]['field_email']['und'][0]['email']['#default_value'] = $account->mail;
  }

  //$form['field_product_id']['#type'] = 'hidden';
  $form['additional_settings']['#access'] = FALSE;
  $form['field_purchase_completed']['#access'] = FALSE;
  // Change button labels for DBA
  _core_ef_set_button($form['field_dba']['und'],"Add a DBA", "Remove this DBA", TRUE);
  // Change button labels for Officers
  _core_ef_set_button($form['field_invite_officers']['und'], "Add another Officer", "Remove this Officer", TRUE);

  // check KBA completion settings
  if ($form['nid']['#value']) {
    //dpm($form['nid']['#value']);
    if (!_em_apply_verify_complete($form['nid']['#value'])) {
      $form['field_agree_final']['#disabled'] = TRUE;
    }
  }
  return $form;
}

function _core_ef_set_button(&$field, $label_add, $label_remove, $remove_button = FALSE) {
  $field['add_more']['#value'] = $label_add;
  foreach ($field as $key => &$button_field) {
    if (is_numeric($key)) {
      if ($key == 0 && $remove_button == TRUE) {
        unset($button_field['remove_button']);
      } else {
        $button_field['remove_button']['#value'] = $label_remove;
      }
    }
  }
  return $field;
}

function core_ef_date_combo_process_alter(&$element, $form_state, $context) {
  if ($element['#field_name'] == 'field_address_dates') {
    // set label on checkbox for End Date to "Previous Address?"
    $element['value']['#title'] = t('From Date:');
    $element['value2']['#title'] = t('To Date:');
    $element['show_todate']['#title'] = t('Previous Address?');
  }
  if ($element['#field_name'] == 'field_employment_dates') {
    // set label on checkbox for End Date to "Previous Employment?"
    $element['value']['#title'] = t('From Date:');
    $element['value2']['#title'] = t('To Date:');
    $element['show_todate']['#title'] = t('Previous Employment?');
  }
}

/**
 * Implementation of hook_block_info().
 */
function core_ef_block_info() {
  $blocks['footer-trust-block'] = array(
    'info' => t('Custom: Footer Trust Block'),
  );	
  return $blocks;
}

function core_ef_block_view($delta='') {
    $block = array();
    switch ($delta) {
	   case 'footer-trust-block':
            $block['subject'] = '';
            //$block['content'] = '<div id ="trustwave_block"><script type="text/javascript" src="https://sealserver.trustwave.com/seal.js?style=normal" >< / script></div>';
            $block['content'] = '<div id ="trustwave_block">'.drupal_add_js('https://sealserver.trustwave.com/seal.js?style=normal', 'external').'< / script></div>';

        break;
   	    }
	    return $block;
}

