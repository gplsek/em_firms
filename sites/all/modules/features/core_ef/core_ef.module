<?php
/**
 * @file
 * Code for the core_ef feature.
 */

include_once 'core_ef.features.inc';

function core_ef_init() {
  if (isset($_GET['pop']) && $_GET['pop'] == 1) {
    drupal_set_message('**Testing the pop up messages. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute. Ipsum lorem. E plurbis unum. E tu Brute.');
  }
}

/*
function core_ef_form_alter(&$form, &$form_state, $form_id) {
  dpm($form_id);
}
*/

function core_ef_form_data_person_node_form_alter(&$form, &$form_state) {
  dpm($form);
  //dpm($form_state);

  $form['field_product_id']['#type'] = 'hidden';
  $form['field_kba']['#access'] = FALSE;
  $form['field_company']['#disabled'] = TRUE;
  $form['additional_settings']['#access'] = FALSE;
   // Change button labels for Residence
  _core_ef_set_button($form['field_address']['und'], "Add an Address", "Remove this Address", TRUE);
  // Change button labels for Employment
  _core_ef_set_button($form['field_employment']['und'], "Add an Employer", "Remove this Employer", TRUE);
  // Change button labels for Education
  _core_ef_set_button($form['field_education']['und'], "Add a Degree", "Remove this Degree", TRUE);
  // Change button labels for Criminal
  _core_ef_set_button($form['field_criminal']['und'], "Add a Conviction", "Remove this Conviction", TRUE);

  return $form;
}

function core_ef_form_data_company_node_form_alter(&$form, &$form_state) {
  //dpm($form);
  //dpm($form_state);

  //$form['field_product_id']['#type'] = 'hidden';
  $form['additional_settings']['#access'] = FALSE;
  $form['field_purchase_completed']['#access'] = FALSE;
  // Change button labels for DBA
  _core_ef_set_button($form['field_dba']['und'],"Add a DBA", "Remove this DBA", TRUE);
  // Change button labels for Officers
  _core_ef_set_button($form['field_invite_officers']['und'], "Add an Officer", "Remove this Officer", TRUE);

  return $form;
}

function _core_ef_set_button(&$field, $label_add, $label_remove, $remove_button = FALSE) {
  $field['add_more']['#value'] = $label_add;
  foreach ($field as $key => &$button_field) {
    if (is_numeric($key)) {
      if ($key == 0 && $remove_button == TRUE) {
        unset($button_field['remove_button']);
      } else {
        $button_field['remove_button']['#value'] = $label_remove;
      }
    }
  }
  return $field;
}

function core_ef_date_combo_process_alter(&$element, $form_state, $context) {
  if ($element['#field_name'] == 'field_address_dates') {
    // set label on checkbox for End Date to "Previous Address?"
    $element['value']['#title'] = t('From Date:');
    $element['value2']['#title'] = t('To Date:');
    $element['show_todate']['#title'] = t('Previous Address?');
  }
  if ($element['#field_name'] == 'field_employment_dates') {
    // set label on checkbox for End Date to "Previous Employment?"
    $element['value']['#title'] = t('From Date:');
    $element['value2']['#title'] = t('To Date:');
    $element['show_todate']['#title'] = t('Previous Employment?');
  }
}

function _core_ef_form_user(&$form) {
  //drupal_set_message('co_user');
  //disable company fields
  $form['title']['#disabled'] = TRUE;
  $form['field_company_type']['#disabled'] = TRUE;
  $form['body']['#disabled'] = TRUE;
  $form['field_fein']['#disabled'] = TRUE;
  $form['field_state_incorp']['#disabled'] = TRUE;
  $form['field_state_registration']['#disabled'] = TRUE;
  $form['field_year_of_legal_formation']['#disabled'] = TRUE;
  $form['field_dba']['#disabled'] = TRUE;
  $form['field_website']['#disabled'] = TRUE;
  $form['field_facebook']['#disabled'] = TRUE;
  $form['field_twitter']['#disabled'] = TRUE;
  $form['field_linkedin']['#disabled'] = TRUE;
  $form['field_company_phone']['#disabled'] = TRUE;
  $form['field_company_address']['#disabled'] = TRUE;
  // disable other users personal information
  if (isset($form['field_constituents']['und'][0]['field_email']['und'][0]['email']['#default_value'])) {
    global $user;
    foreach ($form['field_constituents']['und'] as $key => $value) {
      if (isset($value['field_email']['und'])) {
        if ($user->mail != $value['field_email']['und'][0]['email']['#default_value']) {
          unset($form['field_constituents']['und'][$key]);
        }
      }
    }
  }
  // prevent this user from adding new users
  unset($form['field_constituents']['und']['add_more']);
  return $form;
}

function _core_ef_form_admin(&$form) {
  //drupal_set_message('co_admin');
  // reduce visible fields for personal info
  foreach ($form['field_constituents']['und'] as $key => $officer) {
    if (is_numeric($key)) {
      $form['field_constituents']['und'][$key]['field_name_middle']['#access'] = FALSE;
      $form['field_constituents']['und'][$key]['field_name_suffix']['#access'] = FALSE;
      $form['field_constituents']['und'][$key]['field_name_maiden']['#access'] = FALSE;
    }
  }

  // invite user stubb
  // @TODO actually send and invite
  $form['field_constituents']['und'][0]['field_email']['und'][0]['email']['#attributes'] = array('onBlur' => 'if(this.value>\'\') $(\'#invite_field\').show();');
  /*$form['field_constituents']['und'][0]['field_email']['und'][0]['email']['#ajax'] = array(
    'wrapper' => 'invite_field',
    'callback' => '_core_ef_invite_show_field',
  );*/
  $form['field_constituents']['und'][0]['invite_confirm'] = array(
    '#type' => 'checkbox',
    '#title' => t('Invite this user'),
    '#default_value' => 0,
    '#weight' => $form['field_constituents']['und'][0]['field_email']['#weight'],
    '#prefix' => '<div id="invite_field" style="display:none;">',
    '#suffix' => '</div>',
    '#ajax' => array(
      'wrapper' => 'ajax_invite_feedback_div',
      'callback' => '_core_ef_check_email_callback',
    ),
  );
  $form['field_constituents']['und'][0]['ajax_invite_feedback'] = array(
    '#prefix' => '<div id="ajax_invite_feedback_div">',
    '#suffix' => '</div>',
    '#weight' => $form['field_constituents']['und'][0]['field_email']['#weight'],
  );

  return $form;
}

function _core_ef_check_email_callback($form, &$form_state) {
  $invite = $form['field_constituents']['und'][0]['invite_confirm']['#value'];
  $email = $form['field_constituents']['und'][0]['field_email']['und'][0]['email']['#value'];
  if($invite) {
    $form['field_constituents']['und'][0]['ajax_invite_feedback']['#markup'] = '<p>' . _core_ef_send_email($email) . '</p>';
  } else {
    $form['field_constituents']['und'][0]['ajax_invite_feedback']['#markup'] = '<p>' . t('Not a valid email?') . '</p>';
  }
  return $form['field_constituents']['und'][0]['ajax_invite_feedback'];
}

function _core_ef_invite_show_field(&$form, &$form_state) {
  $email = $form['field_constituents']['und'][0]['field_email']['und'][0]['email']['#value'];
  if($email) {
    $form['field_constituents']['und'][0]['invite_confirm']['#prefix'] = '<div id="invite_field" style="display:block;">';
  } else {
    $form['field_constituents']['und'][0]['invite_confirm']['#prefix'] = '<div id="invite_field" style="display:none;">';
  }
  return $form['field_constituents']['und'][0]['invite_confirm'];
}

function _core_ef_send_email($email) {
  //do something with email here
  return _core_ef_ajax_css_wrapper('info', t('This is where an email should be sent to ' . $email));
}

/**
 * Wrap specified message of specified type in CSS class to facilitate theming
 */
function _core_ef_ajax_css_wrapper($type, $message) {
  switch ($type) {
    case 'info':
    case 'warn':
    case 'error':
      return '<p class="rest-' . $type . '">'. $message . '</p>';
      break;

    default:
      return '<p>' . $message . '</p>';
  }
}