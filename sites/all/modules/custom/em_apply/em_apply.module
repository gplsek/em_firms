<?php

function em_apply_menu() {
  $items = array();

  $items['client/get-started'] = array(
    'page callback' => 'em_apply_check',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['user/%/apply'] = array(
    'page callback' => 'em_apply_form',
    'page arguments' => array(1),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['kba'] = array(
    'page callback' => 'em_apply_kba',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['verification'] = array(
    'page callback' => 'em_apply_verification',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  return $items;
}
/**
 * Implementation of hook_block_info().
 */
function em_apply_block_info() {
  $blocks['apply-block'] = array(
    'info' => t('Custom: Apply Block'),
  );

  return $blocks;
}

function em_apply_kba(){
	global $user;
	if($_SESSION['data_form']){
	  return drupal_get_form('em_apply_kba_form');
	  return;
    }else{
	  print "No session";
	  return;
    }
}

function em_apply_verification(){
	global $user;
	if($_SESSION['data_form']){
	 return drupal_get_form('em_apply_verification_form');

    }else{
	  print "No session";
	  return;
    }
}

function em_apply_verification_form($form, &$form_state){
	global $user;
	$data_nid = $_SESSION['data_form'];
	$node = node_load($data_nid);
	// require_once DRUPAL_ROOT . '/includes/locale.inc';
	//     $country_options = country_get_list();


	$form['#prefix'] = '<div id="verification-form-wrapper"><h2>User Verification</h2>';
	$form['#suffix'] = '</div>';
	$form['data_person_nid'] = array(
		'#type' => 'hidden',
		'#default_value' => $data_nid,

	);
	$form['first_name'] = array(
		'#title' => t('First Name'),
		'#type' => 'textfield',
		'#default_value' => $node->field_name_first['und'][0]['value'],

	);
	$form['last_name'] = array(
		'#title' => t('Last Name'),
		'#type' => 'textfield',
		'#default_value' => $node->field_name_last['und'][0]['value'],

	);

	$form['birthdate'] = array(
	  '#title' => t('Birthdate'),
	  '#type' => 'date',
	  '#description' => t('Select your birthdate'),
	  '#default_value' => array(
	  	    'month' => format_date(time(), 'custom', 'n'),
	  	    'day' => format_date(time(), 'custom', 'j'),
	  	    'year' => format_date(time(), 'custom', 'Y'),
	  	  ),
	);

	$form['ssn'] = array(
		'#title' => t('Social Security Number'),
		'#type' => 'textfield',

	);

	$form['address'] = array(
		    '#type' => 'addressfield',
		    '#title' => t('Address'),
		    '#required' => TRUE,
		    '#default_value' => array('country' => 'US'), // Selects USA by default
		    '#description' => "Please enter your address.",
		  );


	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('Verify')
	);


	return $form;


}

function em_apply_kba_form($form, &$form_state){
	global $user;
	$data_nid = $_SESSION['data_form'];



	$form['#prefix'] = '<div id="kba-form-wrapper"><h2>User Verification</h2>';
	$form['#suffix'] = '</div>';
	$form['data_person_nid'] = array(
		'#type' => 'hidden',
		'#default_value' => $data_nid,

	);
	$form['kba'] = array(
		'#title' => t('KBA'),
		'#type' => 'checkbox',
    );

	$form['submit'] = array(
		'#type' => 'submit',
		'#value' => t('KBA')
	);


	return $form;


}

function em_apply_kba_form_submit($form, &$form_state){

	$node = node_load($form_state['values']['data_person_nid']);
	$node->field_kba['und'][0]['value'] = 1;
	node_save($node);
	drupal_goto('node/'.$form_state['values']['data_person_nid'].'/edit');
}

// check status of all kba for a company's node reference fields for each person
function _em_apply_verify_complete($nid) {
  /*$verify_complete = TRUE;
  $node = node_load($nid);
  dpm($node->field_verify);
  foreach($node->field_invite_officers['und'] as $invitee){
    $users = field_collection_item_load($invitee['value'], $reset = FALSE);
    $verify = $users->field_verify['und'][0]['value'];
    if (!$verify) {
      // any value set to 0 sets the whole company as incomplete for KBA
      $verify_complete = FALSE;
      drupal_set_message("verify FALSE");
    } else {
      drupal_set_message("verify TRUE");
    }
  }
  return $verify_complete;*/
  drupal_set_message("Checking verification of all officers. Fake as false.");
  return FALSE;
}

function em_apply_verification_form_submit($form, &$form_state){

	$node = node_load($form_state['values']['data_person_nid']);

	$node->field_name_last['und'][0]['value'] = $form_state['values']['last_name'];
	$node->field_name_first['und'][0]['value'] = $form_state['values']['first_name'];
	$node->field_ssn['und'][0]['value'] = $form_state['values']['ssn'];
	$node->field_dob['und'][0]['value'] = $form_state['values']['birthdate']['year'].'-'.$form_state['values']['birthdate']['month'].'-'.$form_state['values']['birthdate']['day'];
	$node->field_address_history['und'][0] = $form_state['values']['address'];


	node_save($node);

	drupal_goto('kba');



}


function em_apply_block_view($delta='') {
    $block = array();
    switch ($delta) {
	  case 'apply-block':
            $block['subject'] = '';
           // $block['content'] = apply_block();
           $block['content'] = "<a href='client/get-started'>GET STARTED</a>";
        break;
    }
    return $block;
}

function em_apply_check(){
	global $user;

	if($user->uid == '0'){
    $_SESSION['destination'] = 'client/get-started';
    setcookie("destination", 'client/get-started', time()+3600, "/");
		drupal_goto('user/login');
	}else{
    // @TODO add lookup for open apps here
    // send user to the appropriate open application
    // if more than one application is open to user, then send to /user where they can decide from list
		drupal_goto('user/'.$user->uid.'/apply');
	}
	return;


}

function em_apply_form($uid){
  global $user;
  $node = (object) array('uid' => $user->uid, 'name' => (isset($user->name) ? $user->name : ''), 'type' => 'data_company', 'language' => LANGUAGE_NONE);
  $form_state['build_info']['args'] = array($node);
  form_load_include($form_state, 'inc', 'node', 'node.pages');
  return drupal_build_form('data_company_node_form', $form_state);
}





//function em_apply_node_presave($node) {
function em_apply_node_insert($node) {
	global $user;
	if ($node->type == 'data_company'){
    // @TODO this will need to move to firing on purchase complete
    // I think in function commerce_ef_commerce_checkout_complete($order)
    _em_apply_invite($node);
    // check who is updating the form
	_em_apply_company_map($node);
	}

}


function em_apply_node_update($node) {
	if ($node->type == 'data_company'){
    // @TODO this will need to move to firing on purchase complete
    // I think in function commerce_ef_commerce_checkout_complete($order)
    _em_apply_invite($node);
		// check who is updating the form
    _em_apply_company_map($node);

	}

}

function _em_apply_company_map($node){
	global $user;
	if($user->uid == $node->uid){
	//admin
		$result = db_select('em_company','d')
	   		->fields('d')
			->condition('formid',$node->nid,'=')
			->condition('admin_uid', $node->uid,'=')
	    	->execute()
			->fetchAssoc();
		if($result){
		//update
		db_update('em_company')
		    ->fields(array(
		    	'updated' => REQUEST_TIME
		     		))
		    ->condition('id', $result['id'])
		    ->execute();
		}else{
			//create new company
			$id = db_insert('em_company')
				->fields(array(
		  			'formid' => $node->nid,
		  			'admin_uid' => $node->uid,
		  			'uid' => $user->uid,
		  			'created' => REQUEST_TIME,
		  			'updated' => REQUEST_TIME,
					))
				->execute();
		}

	}else{
	// officer
			$result = db_select('em_company','d')
		   		->fields('d')
				->condition('formid',$node->nid,'=')
				->condition('uid', $user->uid,'=')
				->condition('admin_uid', $node->uid,'=')
		    	->execute()
				->fetchAssoc();
			if($result){
			//update
			db_update('em_company')
			    ->fields(array(
			    	'updated' => REQUEST_TIME
			     		))
			    ->condition('id', $result['id'])
			    ->execute();
			}else{
				//create new company officer record
				$id = db_insert('em_company')
					->fields(array(
			  			'formid' => $node->nid,
			  			'admin_uid' => $node->uid,
			  			'uid' => $user->uid,
			  			'created' => REQUEST_TIME,
			  			'updated' => REQUEST_TIME,
						))
					->execute();
			}

	}
}


function _em_apply_invite($node) {
  $company_nid = $node->nid;
  $company_name = $node->title;
  foreach($node->field_invite_officers['und'] as $invitee){
    $users = field_collection_item_load($invitee['value'], $reset = FALSE);
    //dpm($users);
    $fname = $users->field_first_name['und'][0]['value'];
    $lname = $users->field_last_name['und'][0]['value'];
    $email = $users->field_email['und'][0]['email'];
    $nuser = user_load_by_mail($email);
    if($nuser){
      //exists
      //print "HE is here";
      $nuid = $nuser->uid;
      //send email to notify of invite  drupal_mail()
    }else{
      // create user
      //print "create new";


      // $newUser[roles] = array(
      //          DRUPAL_AUTHENTICATED_RID => 'authenticated user',
      //         // 3 => 'custom_role',
      //        );

              $account = new stdClass;
      $account->is_new = TRUE;
      $account->name = $fname.' '.$lname;
      //$account->pass = user_hash_password('');
      $account->mail = $email;
      $account->init = $email;
      $account->status = TRUE;
      $account->roles = array(DRUPAL_AUTHENTICATED_RID => TRUE);
      $account->timezone = variable_get('date_default_timezone', '');
      $newUser = user_save($account);
      //register_no_approval_required
      //register_admin_created
      _user_mail_notify('register_no_approval_required', $newUser);
      //$newUser = user_load_by_mail($email);
      $nuid = $newUser->uid;
      unset($newUser);
    }
    //check if the data_person node exists, find node by uid and then see if it belongs to this company $company_nid
    $result = db_select('node','d')
   		->fields('d')
		->condition('type','data_person','=')
		->condition('uid', $nuid,'=')
		->execute();
    while($record = $result->fetchAssoc()) {
	    if($record['nid']){
		  $pnode = node_load($record['nid']);
		  if($company_nid == $pnode->field_company['und'][0]['nid']){
			$personnode = $pnode;
		  }
	    }
	}

    if(!$personnode){
	    $personnode = new stdClass();
	    $personnode->type = 'data_person';
    }
    //print "Create Node for this user: ".$nuid."<br>";


    $personnode->title = $company_name.': '.$fname.' '.$lname;
    node_object_prepare($personnode); // Sets some defaults. Invokes hook_prepare() and hook_node_prepare().

    $personnode->field_name_first['und'][0]['value'] = $fname;
    $personnode->field_name_last['und'][0]['value'] = $lname;
    $personnode->field_email_address['und'][0]['value'] = $email;
    $personnode->uid = $nuid;
    $personnode->language = 'und';
    $personnode->field_company['und'][0]['nid'] = $node->nid;
    $personnode = node_submit($personnode); // Prepare node for saving

    node_save($personnode);
    unset($personnode);

  }
}


// function em_apply_node_update($node) {
// 	if ($node->type == 'data_company'){
//     // this works as a test
// 		//unset($node->field_fein);
// 	}
//
// }

function em_apply_node_prepare($node) {
  if ($node->type == 'data_company'){
    // this works as a test
	  //$node->field_fein['und'][0]['value'] = 'test fein';
	}
}


/**
 * Implements hook_user_login
 */
function em_apply_user_login(&$edit, $account) {
  if (!isset($_POST['form_id']) || $_POST['form_id'] != 'user_pass_reset' || variable_get('login_destination_immediate_redirect', FALSE)) {
    _em_apply_redirect_id($account);
  }// else{
  // 	drupal_goto(referer_uri());
  //   }
}

function _em_apply_redirect_id($account) {
  if (isset($_COOKIE['destination']) && $_COOKIE['destination'] == 'client/get-started') {
    //if cookie exists then expire it and set new destination
    setcookie("destination", "", time() - 3600, "/");
    $GLOBALS['destination'] = 'client/get-started';
    drupal_goto('client/get-started');
  }
  //send them to person_data/kba form
  $query = new EntityFieldQuery();
  $entity = $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'data_person')
    ->entityCondition('uid', $account->uid)
    ->execute();
  if($entity){
    // we have a data_person node
    $node = array_keys($entity['node']);
    $nid = $node['0'];

    $dataPerson = node_load($nid);
   if(empty($dataPerson->field_kba) || ($dataPerson->field_kba['und'][0]['value'] == 0)){
      //send to kba process
      $_SESSION['data_form'] = $nid;
      unset($dataPerson);
      $GLOBALS['destination'] = 'verification';
      drupal_goto('verification');
    } else {
      //send to personal data form
      unset($dataPerson);
      drupal_goto('/node/'.$nid.'/edit');
    }
  }
}


function em_apply_user_insert(&$edit, $account, $category) {
  $GLOBALS['destination'] = '';
}
